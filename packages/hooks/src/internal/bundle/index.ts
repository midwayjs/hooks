import { getConfig, getRouter, getSource } from '..'
import { run } from '@midwayjs/glob'
import { join, relative } from 'upath'
import fs from 'fs'
import template from 'art-template'

// TODO FaaS/Web/exclude async_hooks module / remove art-template
export async function generateEntry() {
  const projectConfig = getConfig()
  const source = getSource({ useSourceFile: false })
  const router = getRouter(source)

  const files = run(['**/*.js'], {
    cwd: source,
    ignore: [
      '**/node_modules/**',
      '**/*.d.ts',
      '**/*.{test,spec}.{ts,tsx,js,jsx,mjs}',
      '**/_client/**/*',
    ],
  })

  const apis = files.filter(
    (file) =>
      router.isSourceFile(file, source) &&
      router.isApiFile({ file, mod: require(file) })
  )

  const entry = `
// This file is auto-generated by @midwayjs/hooks, any modification will be overwritten.
const { setConfig, setProjectRoot } = require('@midwayjs/hooks/internal');

setProjectRoot('./');
setConfig(${JSON.stringify(projectConfig, null, 2)});

globalThis.MIDWAY_HOOKS_HYDRATE_OPTIONS = {
  source: './',
  modules: [
    {{each apis}}
      {
        file: '{{$value}}',
        mod: require('./{{$value}}'),
      },
    {{/each}}
  ]
};

{{each files}}require('./{{$value}}');\n{{/each}}

const { Bootstrap } = require('@midwayjs/bootstrap');
const configuration = require('./configuration');

Bootstrap.configure({
  moduleDetector: false,
  configurationModule: configuration.default || configuration
})
  .run()
`

  const bundle = template.render(entry, {
    files: files.map((file) => relative(source, file)),
    apis: apis.map((file) => relative(source, file)),
  })

  fs.writeFileSync(join(source, 'bundle_entry.js'), bundle, 'utf8')
}
