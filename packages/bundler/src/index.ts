import { createUnplugin, UnpluginOptions } from 'unplugin'
import {
  AbstractRouter,
  ApiRoute,
  createDebug,
  EXPORT_DEFAULT_FUNCTION_ALIAS,
  parseApiModule,
} from '@midwayjs/hooks-core'
import '@midwayjs/esrun/register'

export { EsbuildPlugin, VitePlugin, RollupPlugin } from 'unplugin'

const debug = createDebug('hooks-bundler')

const omit = (key: string, { [key]: _, ...obj }) => obj

interface BundlerConfig {
  name: string
  router: AbstractRouter
}

export abstract class AbstractBundlerAdapter {
  constructor(private config: BundlerConfig) {}

  getName() {
    return this.config.name
  }

  abstract getSource(): string

  getRouter() {
    return this.config.router
  }

  getUnplugin(): Partial<UnpluginOptions> {
    return {}
  }

  transformApiRoutes(apis: ApiRoute[]) {
    return apis
  }

  generateClient(apis: ApiRoute[]) {
    let fetcherId = 0
    const importClient = new Map<string, [string, string, number]>()

    const importCodes = new Set<string>()
    const functionCodes = []

    for (const {
      trigger,
      functionName,
      functionId,
      useInputMetadata,
    } of apis) {
      if (!trigger.requestClient) continue
      const { fetcher, client } = trigger.requestClient

      const clientId = `${client}_${fetcher}`
      if (!importClient.has(clientId)) {
        importClient.set(clientId, [client, fetcher, fetcherId++])
      }

      const [clientName, fetcherName, idx] = importClient.get(clientId)
      const uniqueFetcher = `rpc$${idx}`
      importCodes.add(
        `import { ${fetcherName} as ${uniqueFetcher} } from '${clientName}'`
      )

      const exportModifier =
        functionName === EXPORT_DEFAULT_FUNCTION_ALIAS ? 'default' : ''
      functionCodes.push(`
        export ${exportModifier} function ${functionName} (...args) {
          const route = ${functionName}.route;
          return ${uniqueFetcher}(...args, route)
        };
        ${functionName}.route = {
          trigger: ${JSON.stringify(omit('requestClient', trigger))},
          functionId: '${functionId}',
          useInputMetadata: ${!!useInputMetadata},
        };
      `)
    }

    const code = [
      '// This file is auto-generated by @midwayjs/bundler. Any changes will be overwritten.',
      ...importCodes,
      ...functionCodes,
    ].join('\n')

    debug('generate client code: %s', code)

    return code
  }
}

export function createBundlerPlugin(adapter: AbstractBundlerAdapter) {
  return createUnplugin((options) => {
    return {
      name: adapter.getName(),
      enforce: 'pre',
      transformInclude(id: string) {
        const source = adapter.getSource()
        const router = adapter.getRouter()

        if (!router.isSourceFile(id, source)) {
          return false
        }

        return router.isApiFile({
          file: id,
          mod: requireWithoutCache(id),
        })
      },
      async transform(code: string, id: string) {
        const apis = parseApiModule(
          requireWithoutCache(id),
          id,
          adapter.getRouter()
        )
        const transformedApis = adapter.transformApiRoutes(apis)
        return adapter.generateClient(transformedApis)
      },
      ...adapter.getUnplugin(),
    }
  })
}

/**
 * In dev mode, ensure get latest module content when file changes
 */
export function requireWithoutCache(module: string) {
  delete require.cache[require.resolve(module)]
  return require(module)
}
